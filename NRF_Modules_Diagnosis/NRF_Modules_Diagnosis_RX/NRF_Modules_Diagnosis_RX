#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <avr/wdt.h>  // Watchdog Timer library

#define CE_PIN 9
#define CSN_PIN 10

RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

void setup() {
    Serial.begin(9600);
    if (!radio.begin()) {
        Serial.println("‚ùå NRF24L01 not detected! Check wiring.");
        while (1);
    }
    else{
      Serial.println("       ‚úÖ NRF24L01 detected");
    }
connectNRF();
}

void loop() {
    if (radio.available()) {
        int receivedData = 0;
        radio.read(&receivedData, sizeof(receivedData));

        Serial.print("‚úÖ Received: ");
        Serial.print(receivedData);

        int ackResponse = receivedData;
        radio.writeAckPayload(0, &ackResponse, sizeof(ackResponse));  // Send Ack payload
        Serial.print("  |  üì© Sent Ack Response: ");
        Serial.println(ackResponse);

        // Measure RSSI and send it back as Ack Payload
        int rssi = radio.testRPD();  // Test if RSSI is above the threshold
        int receivedRSSI = rssi ? 1 : 0;  // If signal is above threshold, set RSSI to 1, else 0
        radio.writeAckPayload(0, &receivedRSSI, sizeof(receivedRSSI));  // Send RSSI value
        // Reset the watchdog timer before the timeout
        wdt_reset();  // This resets the WDT counter (prevents reset)
    }

    // If no communication, the watchdog timer will reset the system
}

void connectNRF(){
    radio.setChannel(125);               // **Most rare communication channel**
    radio.setPALevel(RF24_PA_MAX);
    radio.setDataRate(RF24_250KBPS);
    radio.setCRCLength(RF24_CRC_16);
    radio.enableAckPayload();
    radio.enableDynamicPayloads();
    radio.setAutoAck(true);
    radio.openReadingPipe(0, address);
    radio.startListening();

}